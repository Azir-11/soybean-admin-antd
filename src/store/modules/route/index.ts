import { ref, watch, effectScope, onScopeDispose } from 'vue';
import type { RouteRecordRaw } from 'vue-router';
import { defineStore } from 'pinia';
import { useBoolean } from '@sa/hooks';
import type { ElegantConstRoute, CustomRoute, RouteKey, LastLevelRouteKey, RouteMap } from '@elegant-router/types';
import { SetupStoreId } from '@/enum';
import { router } from '@/router';
import { authRoutes, constantVueRoutes, getAuthVueRoutes, ROOT_ROUTE } from '@/router/routes';
import { getRoutePath, getRouteName } from '@/router/elegant/transform';
import { fetchGetUserRoutes, fetchIsRouteExist } from '@/service/api';
import {
  filterAuthRoutesByRoles,
  getGlobalMenusByAuthRoutes,
  transformGlobalMenusToAntdMenu,
  getCacheRouteNames,
  isRouteExistByRouteName
} from './shared';
import { useAppStore } from '../app';
import { useAuthStore } from '../auth';
import { useTabStore } from '../tab';

export const useRouteStore = defineStore(SetupStoreId.Route, () => {
  const app = useAppStore();
  const auth = useAuthStore();
  const tab = useTabStore();
  const scope = effectScope();
  const { bool: isInitAuthRoute, setBool: setIsInitAuthRoute } = useBoolean();

  /**
   * auth route mode
   * @description it recommends to use static mode in the development environment, and use dynamic mode in the production environment,
   * if use static mode in development environment, the auth routes will be auto generated by plugin "@elegant-router/vue"
   */
  const authRouteMode = ref(import.meta.env.VITE_AUTH_ROUTE_MODE);

  /**
   * home route key
   */
  const routeHome = ref(import.meta.env.VITE_ROUTE_HOME);

  /**
   * set route home
   * @param routeKey route key
   */
  function setRouteHome(routeKey: LastLevelRouteKey) {
    routeHome.value = routeKey;
  }

  /**
   * global menus
   */
  const globalMenus = ref<App.Global.Menu[]>([]);

  /**
   * get global menus
   */
  function getGlobalMenus(routes: ElegantConstRoute[]) {
    globalMenus.value = getGlobalMenusByAuthRoutes(routes);

    getAntdMenus();
  }

  /**
   * antd menus
   */
  const antdMenus = ref<App.Global.AntdMenu[]>([]);

  /**
   * get antd menus
   */
  function getAntdMenus() {
    antdMenus.value = transformGlobalMenusToAntdMenu(globalMenus.value);
  }

  /**
   * cache routes
   */
  const cacheRoutes = ref<RouteKey[]>([]);

  /**
   * get cache routes
   * @param routes vue routes
   */
  function getCacheRoutes(routes: RouteRecordRaw[]) {
    cacheRoutes.value = getCacheRouteNames([...constantVueRoutes, ...routes]);
  }

  /**
   * reset store
   */
  async function resetStore() {
    const routeStore = useRouteStore();

    routeStore.$reset();
  }

  /**
   * init auth route
   */
  async function initAuthRoute() {
    if (authRouteMode.value === 'static') {
      await initStaticAuthRoute();
    } else {
      await initDynamicAuthRoute();
    }

    tab.initHomeTab(router);
  }

  /**
   * init static auth route
   */
  async function initStaticAuthRoute() {
    const filteredAuthRoutes = filterAuthRoutesByRoles(authRoutes, auth.userInfo.roles);

    handleAuthRoutes(filteredAuthRoutes);

    setIsInitAuthRoute(true);
  }

  /**
   * init dynamic auth route
   */
  async function initDynamicAuthRoute() {
    const {
      data: { routes, home }
    } = await fetchGetUserRoutes();

    handleAuthRoutes(routes);

    setRouteHome(home);

    handleUpdateRootRouteRedirect(home);

    setIsInitAuthRoute(true);
  }

  /**
   * handle routes
   * @param routes auth routes
   */
  function handleAuthRoutes(routes: ElegantConstRoute[]) {
    const vueRoutes = getAuthVueRoutes(routes);

    addRoutesToVueRouter(vueRoutes);

    getGlobalMenus(routes);

    getCacheRoutes(vueRoutes);
  }

  /**
   * add routes to vue router
   * @param routes vue routes
   */
  function addRoutesToVueRouter(routes: RouteRecordRaw[]) {
    routes.forEach(route => {
      router.addRoute(route);
    });
  }

  /**
   * update root route redirect when auth route mode is dynamic
   * @param redirectKey redirect route key
   */
  function handleUpdateRootRouteRedirect(redirectKey: LastLevelRouteKey) {
    const redirect = getRoutePath(redirectKey);

    if (redirect) {
      const rootRoute: CustomRoute = { ...ROOT_ROUTE, redirect };

      router.removeRoute(rootRoute.name);

      const [rootVueRoute] = getAuthVueRoutes([rootRoute]);

      router.addRoute(rootVueRoute);
    }
  }

  /**
   * get is auth route exist
   * @param routePath route path
   */
  async function getIsAuthRouteExist(routePath: RouteMap[RouteKey]) {
    const routeName = getRouteName(routePath);

    if (!routeName) {
      return false;
    }

    if (authRouteMode.value === 'static') {
      return isRouteExistByRouteName(routeName, authRoutes);
    }

    const { data } = await fetchIsRouteExist(routeName);

    return data;
  }

  // watch store
  scope.run(() => {
    // update menus when locale changed
    watch(
      () => app.locale,
      () => {
        getAntdMenus();
      }
    );
  });

  /**
   * on scope dispose
   */
  onScopeDispose(() => {
    scope.stop();
  });

  return {
    resetStore,
    antdMenus,
    cacheRoutes,
    routeHome,
    initAuthRoute,
    isInitAuthRoute,
    setIsInitAuthRoute,
    getIsAuthRouteExist
  };
});
