import { ref, watch, effectScope, onScopeDispose } from 'vue';
import type { RouteRecordRaw } from 'vue-router';
import { defineStore } from 'pinia';
import { useBoolean } from '@sa/hooks';
import type { RouteKey } from '@elegant-router/types';
import { SetupStoreId } from '@/enum';
import { router } from '@/router';
import { createRoutes } from '@/router/routes';
import { getGlobalMenusByAuthRoutes, getAntdMenuByGlobalMenus, getCacheRouteNames } from './shared';
import { useAppStore } from '../app';

export const useRouteStore = defineStore(SetupStoreId.Route, () => {
  const app = useAppStore();
  const scope = effectScope();

  const { bool: isInitAuthRoute, setBool: setIsInitAuthRoute } = useBoolean();

  /**
   * auth route mode
   * @description it recommends to use static mode in the development environment, and use dynamic mode in the production environment,
   * if use static mode in development environment, the auth routes will be auto generated by plugin "@elegant-router/vue"
   */
  const authRouteMode = ref(import.meta.env.VITE_AUTH_ROUTE_MODE);

  /**
   * home route key
   */
  const routeHome = ref(import.meta.env.VITE_ROUTE_HOME);

  /**
   * global menus
   */
  const globalMenus = ref<App.Global.Menu[]>([]);

  /**
   * get global menus
   */
  function getGlobalMenus() {
    const { treeRoutes } = createRoutes();
    globalMenus.value = getGlobalMenusByAuthRoutes(treeRoutes);
    getAntdMenus();
  }

  /**
   * antd menus
   */
  const antdMenus = ref<App.Global.AntdMenu[]>([]);

  /**
   * get antd menus
   */
  function getAntdMenus() {
    antdMenus.value = getAntdMenuByGlobalMenus(globalMenus.value);
  }
  /**
   * cache routes
   */
  const cacheRoutes = ref<RouteKey[]>([]);

  function getCacheRoutes() {
    const { authRoutes } = createRoutes();
    cacheRoutes.value = getCacheRouteNames(authRoutes);
  }

  async function initAuthRoute() {
    if (authRouteMode.value === 'static') {
      await initStaticAuthRoute();
    } else {
      await initDynamicAuthRoute();
    }
  }

  /**
   * init static auth route
   */
  async function initStaticAuthRoute() {
    const { authVueRoutes } = createRoutes();
    handleRoutes(authVueRoutes);
  }

  /**
   * init dynamic auth route
   */
  async function initDynamicAuthRoute() {
    //
  }

  /**
   * handle routes
   * @param routes
   */
  function handleRoutes(routes: RouteRecordRaw[]) {
    addRoutesToVueRouter(routes);
    getGlobalMenus();
    getCacheRoutes();
  }

  /**
   * add routes to vue router
   * @param routes
   */
  function addRoutesToVueRouter(routes: RouteRecordRaw[]) {
    routes.forEach(route => {
      router.addRoute(route);
    });
  }

  // watch store
  scope.run(() => {
    // update menus when locale changed
    watch(
      () => app.locale,
      () => {
        getAntdMenus();
      }
    );
  });

  /**
   * on scope dispose
   */
  onScopeDispose(() => {
    scope.stop();
  });

  return {
    antdMenus,
    cacheRoutes,
    routeHome,
    initAuthRoute,
    isInitAuthRoute,
    setIsInitAuthRoute
  };
});
